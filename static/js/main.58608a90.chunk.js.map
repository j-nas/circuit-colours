{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","circuit","setCircuit","colour","setColour","className","type","name","id","value","onChange","e","target","onClick","colourOutput","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNA+DeA,MA5Df,WACE,MAA8BC,mBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA4BF,mBAAS,OAArC,mBAAOG,EAAP,KAAeC,EAAf,KAqCA,OACE,sBAAKC,UAAU,MAAf,UACC,2CACWJ,EADX,OACwBE,KAGtB,uBACCG,KAAK,SACLC,KAAK,SACLC,GAAG,SACHC,MAAOR,EACPS,SA9Ce,SAACC,GACpB,IAAMF,EAAQE,EAAEC,OAAOH,MACvBP,EAAWO,MA8CR,wBAAQI,QA3CK,WAChB,IAAIC,EAAe,GACnB,OAAQb,EAAU,GAChB,KAAK,EACHa,EAAe,OACf,MACF,KAAK,EAGL,KAAK,EACHA,EAAe,MACf,MACF,KAAK,EAGL,KAAK,EACHA,EAAe,QACf,MACF,KAAK,EACHA,EAAe,OAKnBV,EAAUU,IAmBP,8BC3CQC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.58608a90.chunk.js","sourcesContent":["import './App.css';\nimport React, {useState} from 'react';\n\nfunction App() {\n  const [circuit, setCircuit] = useState(1)\n  const [colour, setColour] = useState(\"red\")\n  \n  const handleChange = (e) =>{\n    const value = e.target.value;\n    setCircuit(value)\n  }\n  \n  const getColour = () => {\n    let colourOutput = \"\"\n    switch (circuit % 6) {\n      case 0:\n        colourOutput = \"blue\"\n        break\n      case 1:\n        colourOutput = \"red\"\n        break\n      case 2:\n        colourOutput = \"red\"  \n        break\n      case 3:\n        colourOutput = \"black\"\n        break\n      case 4: \n        colourOutput = \"black\"\n        break\n      case 5: \n        colourOutput = \"blue\"\n        break\n      default:\n        break\n    }\n    setColour(colourOutput)\n  }\n  \n  \n  \n  \n  return (\n    <div className=\"App\">\n     <div>\n       Circuit {circuit} is {colour}\n     </div>\n     \n       <input \n        type=\"number\" \n        name=\"number\" \n        id=\"number\"\n        value={circuit} \n        onChange={handleChange}\n       />\n       <button onClick={getColour}>\n         Check Colour\n       </button>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}